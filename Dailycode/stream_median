This problem was asked by Microsoft.

Compute the running median of a sequence of numbers. That is, given a stream of numbers, print out the median of the list so far on each new element.

Recall that the median of an even-numbered list is the average of the two middle numbers.

For example, given the sequence [2, 1, 5, 7, 2, 0, 5], your algorithm should print out:
2, 1.5 ,2 ,3.5, 2 ,2, 2

void insertionsort(vector<int>&arr){
    int n = arr.size()-1;
    for(int i = 0; i < arr.size();){
        if(arr[n]>=arr[i])
            i++;
        else{
            int temp = arr[n];
            int j;
            for(j = n; j>i; j--){
                arr[j] = arr[j-1];
            }
            arr[j] = temp;
        }
    }
}

int main(){
    int n  = 0;
    vector<int> arr;
    while(n != -1){
        printf("please input #: ");
        scanf("%d", &n);
        arr.push_back(n);
        insertionsort(arr);
        for(int i = 0; i < arr.size(); i++)
            cout<<arr[i] << " ";
        cout<<endl;
        if(arr.size()%2 == 1)
            cout<<"median is "<<arr[arr.size()/2]<<endl;
        else
            cout<<"median is "<<(arr[arr.size()/2]+arr[arr.size()/2-1])*0.5<<endl;
    }
    return 0;
}
